name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: 3.11
  NODE_VERSION: 18

jobs:
  # 后端测试
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python linting
      run: |
        cd backend
        pip install flake8 black
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black app/ --check

    - name: Run Python tests
      env:
        USE_MOCK_DATA: true
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  # 前端测试
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker 构建测试
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: what-to-do-agent:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8080:8080 what-to-do-agent:test
        sleep 10
        curl -f http://localhost:8080/api/v1/health || exit 1
        docker stop test-container

  # 集成测试
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Start backend service
      env:
        USE_MOCK_DATA: true
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd backend
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8080 &
        sleep 10

    - name: Run integration tests
      run: |
        # 测试健康检查
        curl -f http://localhost:8080/api/v1/health
        
        # 测试推荐接口（需要认证）
        curl -f http://localhost:8080/docs

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [docker-build, integration-test, security-scan]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to development
      run: |
        echo "部署到开发环境"
        # 这里添加实际的部署脚本

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [docker-build, integration-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "部署到生产环境"
        # 这里添加实际的部署脚本

  # 发布通知
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        echo "部署状态通知"
        # 这里可以添加钉钉、企业微信等通知